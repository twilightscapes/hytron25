---
import type { CollectionEntry } from "astro:content";
import BlogHero from "@/components/blog/Hero.astro";
import TOC from "@/components/blog/TOC.astro";
import BaseLayout from "./Base.astro";


interface Props {
    post: CollectionEntry<"post"> & { data: { youtube?: string } };
}

const { post } = Astro.props;
const {
    data: { description, coverImage, publishDate, title, updatedDate, youtube }
} = post;

// Helper function to extract YouTube video ID
function getYouTubeId(url: string) {
    if (!url) return null;
    const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
}

// Helper function to generate YouTube thumbnail URL
function getYouTubeThumbnail(videoId: string) {
    return `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;
}

// Determine the best social image to use
// Priority: 1) Featured image, 2) YouTube thumbnail, 3) Default social card
let socialImage = `/socialCard.webp`; // Default fallback

if (coverImage?.src) {
    // Use featured image if available
    socialImage = coverImage.src;
} else if (youtube?.discriminant && youtube.value?.url) {
    // No featured image, but there's a YouTube video - use its thumbnail
    const videoId = getYouTubeId(youtube.value.url);
    if (videoId) {
        socialImage = getYouTubeThumbnail(videoId);
    }
}

const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings = [] } = (post.rendered as { headings?: any[] } | undefined) ?? {};
---

<BaseLayout 
  title={title} 
  description={description} 
  articleDate={articleDate} 
  themeMode="user"
  ogImage={socialImage}
>
  <div class="gap-x-10 lg:flex lg:items-start blogpost" >
        
        
<article class="" data-pagefind-body style="position:relative; padding-bottom: 10vh;">
                
    <div id="blog-hero" style="width:100vw; z-index: 0;"><BlogHero content={post} /></div>
                {/* Render dynamic elements */}
    
                
    <div class="panelblur" style={{ padding: "0 4%", width:'90%', margin:'0 auto', maxWidth:'1400px', display:'flex', position:'relative' }}>
        
                    <!-- <img src={svgImage} /> -->
    
                    <!-- {
                        additionalImage && (
                            <Fragment>
                                <img src={getImagePath(additionalImage)} alt="Additional Image" />
                            </Fragment>
                        )
                    } -->
                                    <div class="prose prose-lg dark:prose-invert max-w-none">
                                        <slot />
                                        
                                
                                    </div>
                                    {!!headings.length && <TOC headings={headings} />}
                </div>
            </article>
        
    </div>
</BaseLayout>


