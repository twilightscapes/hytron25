---
import { Image } from 'astro:assets';
import { getEntry } from 'astro:content';
import GalleryLightbox from './GalleryLightbox.jsx';

interface Props {
  sectionId?: string;
}

const { sectionId = 'photo-gallery' } = Astro.props;


// Default values
const DEFAULT_SETTINGS = {
  defaultView: 'grid',
  showHeader: true
};

const DEFAULT_LANGUAGE = {
  allimages: 'All Images'
};

let siteSettingsData = DEFAULT_SETTINGS;
let languageData = DEFAULT_LANGUAGE;

try {
  const settings = await getEntry('siteSettings', 'main');
  if (settings?.data) {
    siteSettingsData = { ...DEFAULT_SETTINGS, ...settings.data };
  }
} catch (error) {
  console.warn('Site settings not found, using defaults');
}

try {
  const language = await getEntry('language', 'index');
  if (language?.data) {
    languageData = { ...DEFAULT_LANGUAGE, ...language.data };
  }
} catch (error) {
  console.warn('Language settings not found, using defaults');
}

const { defaultView } = siteSettingsData;

const photoSettings = await getEntry('photoSettings', 'index');
const defaultDirectory = photoSettings?.data?.defaultDirectory || 'all';
const galleryMode = photoSettings?.data?.galleryMode || 'directory';


const imageFiles = import.meta.glob('/public/images/photos/**/*.{jpg,jpeg,png,gif,webp,avif}', { eager: true });
let allImages;
if (galleryMode === 'keystatic') {
  allImages = photoSettings?.data?.galleryImages?.map((item) => ({
    src: item.image,
    alt: item.caption || '',
    title: item.caption || '',
    directory: 'default',
    isDefault: true
  })) || [];
} else {
  allImages = Object.entries(imageFiles).map(([path, file]) => ({
    src: path.replace('/public', ''),
    alt: path.split('/').pop()?.split('.')[0] || '',
    title: path.split('/').pop()?.split('.')[0] || '',
    directory: path.split('/').slice(-2, -1)[0],
    isDefault: path.split('/').slice(-2, -1)[0] === defaultDirectory
  }));
}

const directories = ([
  'all',
  defaultDirectory,
  ...new Set(
    allImages
      .map(img => img.directory)
      .filter(dir => dir !== defaultDirectory)
  )
] as string[]).filter(Boolean).sort((a, b) => {
  if (a === 'all') return -1;
  if (b === 'all') return 1;
  if (a === defaultDirectory) return -1;
  if (b === defaultDirectory) return 1;
  return a.localeCompare(b);
});

const showCaptions = photoSettings?.data?.showCaptions ?? true;
const showGallerySelector = photoSettings?.data?.showGallerySelector && galleryMode === 'directory';

const images = allImages.map(img => ({
  src: img.src,
  caption: img.title, 
}));

// Pre-process images for the client component
const processedImages = allImages.map(image => ({
  src: image.src, // Use original high-quality source for lightbox
  alt: image.alt || '',
  title: image.title || '',
  // Only include data needed by GalleryLightbox
}));
---




<!-- Gallery selector - positioned absolutely outside flow -->
{showGallerySelector && (
  <div class="cattags" style={{ position: 'absolute', top: '-10px', left: '50%', transform: 'translateX(-50%)', width: 'auto', display: 'flex', justifyContent:'center', gap: '0', color: '', zIndex: defaultView === 'grid' ? '1' : '20', background: 'var(--theme-bg, #1a1a1a)', padding: '0.5rem', borderRadius: 'var(--border-radius)' }}>
    <select aria-label="View Available Galleries" id="directorySelect" name="directorySelect" style={{ background: '', border: '1px solid #000', borderRadius: 'var(--border-radius)', padding: '8px', boxShadow: '0px 0px 0px 1px #000', opacity:'.9', color:'#fff' }}>
      {directories.map((dir) => (
        <option value={dir} selected={dir === defaultDirectory}>
          {dir === 'all' ? languageData.allimages : dir}
        </option>
      ))}
    </select>
  </div>
)}

<div data-section-id={sectionId} style="position: relative; padding-top: 50px;">
<div class={`homegallery contentpanel ${defaultView === 'swipe' ? 'slider' : 'grid-container'}`} style="padding-top:20px;">
  <div class="sliderSpacer" style={{ height: "", paddingTop: "", display: "" }} />


  
  {allImages.map((image, index) => (
    <div class="post-card1" data-directory={image.directory}>
      <img 
        src={image.src ?? ''} 
        alt={image.alt ?? ''}
        class="object-contain rounded-image"
        style="border-radius: var(--border-radius);"
        data-image-index={index}
      />
      {showCaptions && (
        <div class="image-caption">
          <h2>{image.title}</h2>
        </div>
      )}
    </div>
  ))}
</div>
</div>

<!-- Pass only processed data to client component -->
<GalleryLightbox 
  client:only="react" 
  images={processedImages} 
  showCaptions={showCaptions} 
/>





<style>

.post-card1 {
  border-radius: var(--border-radius);
}
img{border-radius: var(--border-radius) !important;}

.image-caption {
  margin-top: 8px;
  text-align: center;
  filter:brightness(.75);
}

.post-card1.hidden {
  display: none;
}

.post-card1.visible {
  display: block;
}


.homegallery.slider,
[data-section-id*="gallery"] .homegallery.slider,
[data-section-id*="gallery"] .section-content .homegallery.slider,
div[data-section-id*="gallery"] div.section-content div.homegallery.slider {
  display: flex !important;
  flex-direction: row !important;
  overflow-x: scroll !important;
  overflow-y: hidden !important;
  gap: 5vw !important;
  padding: 0 2% !important;
  width: 100% !important;
  scroll-snap-type: none !important;
  -webkit-overflow-scrolling: touch !important;
}

.homegallery.slider .post-card1,
[data-section-id*="gallery"] .homegallery.slider .post-card1,
[data-section-id*="gallery"] .section-content .homegallery.slider .post-card1,
div[data-section-id*="gallery"] div.section-content div.homegallery.slider .post-card1 {
  flex: 0 0 auto !important;

  margin-bottom: 0 !important;
}

@media(max-width:48rem) {
  #directorySelect {right:inherit; left:1rem; width:60%;}
  body:has(.header) #directorySelect{left:0 !important; right:0 !important; }
}
</style>
<script define:vars={{ defaultDirectory, sectionId }}>
  function filterImages(selectedDir) {
    const galleryContainer = document.querySelector(`[data-section-id="${sectionId}"] .homegallery`);
    if (!galleryContainer) {
      console.log('Gallery container not found for sectionId:', sectionId);
      return;
    }
    
    const images = galleryContainer.querySelectorAll('.post-card1');
    console.log('Filtering images for directory:', selectedDir, 'Found images:', images.length);
    
    images.forEach((image) => {
      if (image instanceof HTMLElement) {
        const imageDir = image.dataset.directory;
        if (selectedDir === 'all' || imageDir === selectedDir) {
          image.style.display = '';
          image.style.visibility = '';
          image.style.position = '';
          image.style.left = '';
          image.classList.remove('hidden');
          image.classList.add('visible');
        } else {
          image.style.display = 'none';
          image.style.visibility = 'hidden';
          image.style.position = 'absolute';
          image.style.left = '-9999px';
          image.classList.add('hidden');
          image.classList.remove('visible');
        }
      }
    });
  }

  function initializeGallery() {
    // Use defaultDirectory instead of reading from select
    filterImages(defaultDirectory);
  }

  // Wait for both DOM and images to load
  window.addEventListener('load', initializeGallery);

  // Listen for view mode changes to re-filter images
  window.addEventListener('viewModeChanged', (event) => {
    console.log('viewModeChanged event received:', event.detail);
    if (event.detail?.sectionId === sectionId) {
      const galleryContainer = document.querySelector(`[data-section-id="${sectionId}"] .homegallery`);
      const directorySelect = document.getElementById('directorySelect');
      const selectorContainer = document.querySelector('.cattags');
      
      console.log('Gallery container found:', galleryContainer);
      console.log('Current classes:', galleryContainer?.className);
      
      // Fix: Use viewMode instead of mode to match ViewModeSwitch dispatch
      if (galleryContainer && event.detail?.viewMode) {
        // Switch between grid-container and slider classes
        galleryContainer.classList.remove('grid-container', 'slider');
        galleryContainer.classList.add(event.detail.viewMode === 'swipe' ? 'slider' : 'grid-container');
        
        console.log('Updated classes:', galleryContainer.className);
        
        // Update selector z-index based on mode
        if (selectorContainer) {
          selectorContainer.style.zIndex = event.detail.viewMode === 'grid' ? '1' : '20';
        }
      }
      
      if (directorySelect && directorySelect instanceof HTMLSelectElement) {
        filterImages(directorySelect.value);
      }
    }
  });

  const directorySelect = document.getElementById('directorySelect');
  directorySelect?.addEventListener('change', (event) => {
    if (event.target instanceof HTMLSelectElement) {
      filterImages(event.target.value);
      // Don't automatically scroll to top - let user stay where they are
    }
  });

  function scrollToTop() {
    const target = document.querySelector(`[data-section-id="${sectionId}"] .homegallery`);
    if (target?.classList.contains('slider')) {
      target.scrollTo({ left: 0, behavior: 'smooth' });
    } else {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    setTimeout(() => {
      window.scrollTo(0, 0);
      document.body.scrollTop = 0;
      document.documentElement.scrollTop = 0;
    }, 100);
  }
  
</script>
