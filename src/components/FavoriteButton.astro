---
// FavoriteButton.astro - Premium Feature: Add videos to favorites
export interface Props {
  videoId: string;
  videoTitle?: string;
  videoThumbnail?: string;
  videoAuthor?: string;
  videoPublished?: string;
  videoUrl?: string;
  videoDuration?: string;
  videoViews?: string;
  size?: 'small' | 'medium' | 'large';
  style?: 'icon' | 'button' | 'minimal';
}

const { 
  videoId,
  videoTitle = '',
  videoThumbnail = '',
  videoAuthor = '',
  videoPublished = '',
  videoUrl = '',
  videoDuration = '',
  videoViews = '',
  size = 'medium',
  style = 'icon'
} = Astro.props;

const componentId = `favorite-btn-${videoId}-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`favorite-button-container ${size} ${style}`} data-component-id={componentId}>
  <!-- Premium Gate (shown to basic members) -->
  <div class="favorite-premium-gate" style="display: none;">
    <div class="premium-tooltip">
      <div class="premium-tooltip-content">
        <div class="premium-icon">‚≠ê</div>
        <h4>Premium Feature</h4>
        <p>Save videos to favorites with <strong>Premium</strong> membership</p>
        <div class="premium-actions">
          <a href="/membership" class="mini-upgrade-btn">
            üîì Upgrade - $9.99
          </a>
        </div>
      </div>
    </div>
    <button class="favorite-btn premium-locked" title="Premium Feature - Click to upgrade">
      <span class="star-icon">‚òÜ</span>
      <span class="btn-text">Save</span>
      <span class="lock-icon">üîí</span>
    </button>
  </div>

  <!-- Premium Member Controls -->
  <div class="favorite-premium-controls" style="display: none;">
    <button class="favorite-btn" data-video-id={videoId} title="Add to favorites">
      <span class="star-icon">‚òÜ</span>
      <span class="btn-text">Save</span>
    </button>
  </div>
</div>

<style>
  .favorite-button-container {
    position: relative;
    display: inline-block;
  }
  
  /* Size variations */
  .favorite-button-container.small .favorite-btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
  }
  
  .favorite-button-container.medium .favorite-btn {
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
  }
  
  .favorite-button-container.large .favorite-btn {
    padding: 0.75rem 1rem;
    font-size: 1rem;
  }
  
  /* Style variations */
  .favorite-button-container.icon .btn-text {
    display: none;
  }
  
  .favorite-button-container.icon .favorite-btn {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .favorite-button-container.icon.small .favorite-btn {
    width: 24px;
    height: 24px;
  }
  
  .favorite-button-container.icon.large .favorite-btn {
    width: 40px;
    height: 40px;
  }
  
  .favorite-button-container.minimal .favorite-btn {
    background: transparent;
    border: none;
    color: #666;
    padding: 0.25rem;
  }
  
  .favorite-button-container.minimal .favorite-btn:hover {
    background: rgba(66, 133, 244, 0.1);
    color: #4285f4;
  }
  
  /* Base button styling */
  .favorite-btn {
    background: transparent;
    border: 2px solid #ddd;
    border-radius: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    font-family: inherit;
    font-weight: 500;
    color: #666;
    position: relative;
    overflow: hidden;
  }
  
  .favorite-btn:hover {
    border-color: #4285f4;
    color: #4285f4;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(66, 133, 244, 0.2);
  }
  
  .favorite-btn.favorited {
    background: linear-gradient(45deg, #ffd700, #ffed4e);
    border-color: #ffd700;
    color: #333;
  }
  
  .favorite-btn.favorited .star-icon {
    color: #ff6b35;
  }
  
  .favorite-btn.favorited:hover {
    background: linear-gradient(45deg, #ffed4e, #ffd700);
    transform: translateY(-1px) scale(1.05);
  }
  
  /* Premium locked styling */
  .favorite-btn.premium-locked {
    border-color: #ccc;
    color: #999;
    cursor: pointer;
  }
  
  .favorite-btn.premium-locked:hover {
    border-color: #667eea;
    color: #667eea;
  }
  
  .star-icon {
    font-size: 1.1em;
    transition: all 0.3s ease;
  }
  
  .favorite-btn:hover .star-icon {
    transform: scale(1.2);
  }
  
  .favorite-btn.favorited .star-icon {
    animation: starPulse 0.6s ease-in-out;
  }
  
  .lock-icon {
    font-size: 0.8em;
    opacity: 0.7;
  }
  
  @keyframes starPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
  }
  
  /* Premium tooltip */
  .favorite-premium-gate {
    position: relative;
  }
  
  .premium-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 10px;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    pointer-events: none;
  }
  
  .favorite-premium-gate:hover .premium-tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(-5px);
  }
  
  .premium-tooltip-content {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem;
    border-radius: 12px;
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    text-align: center;
    min-width: 200px;
    position: relative;
  }
  
  .premium-tooltip-content::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 8px solid transparent;
    border-top-color: #667eea;
  }
  
  .premium-tooltip .premium-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
  }
  
  .premium-tooltip h4 {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
    color: white;
  }
  
  .premium-tooltip p {
    margin: 0 0 1rem 0;
    font-size: 0.85rem;
    opacity: 0.9;
    line-height: 1.3;
  }
  
  .mini-upgrade-btn {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.3);
    display: inline-block;
  }
  
  .mini-upgrade-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }
  
  /* Loading state */
  .favorite-btn.loading {
    pointer-events: none;
    opacity: 0.7;
  }
  
  .favorite-btn.loading .star-icon {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* Success animation */
  .favorite-btn.success {
    animation: successPulse 0.6s ease-in-out;
  }
  
  @keyframes successPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); box-shadow: 0 0 20px rgba(255, 215, 0, 0.6); }
    100% { transform: scale(1); }
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .premium-tooltip-content {
      min-width: 180px;
      padding: 0.75rem;
    }
    
    .premium-tooltip h4 {
      font-size: 0.9rem;
    }
    
    .premium-tooltip p {
      font-size: 0.8rem;
    }
    
    .mini-upgrade-btn {
      font-size: 0.75rem;
      padding: 0.4rem 0.8rem;
    }
  }
</style>

<script>
// Premium Favorite Button with Membership Integration
class PremiumFavoriteButton {
  private componentId: string;
  private container: HTMLElement | null;
  private videoData: any;
  private premiumGate: HTMLElement | null = null;
  private premiumControls: HTMLElement | null = null;
  private favoriteBtn: HTMLElement | null = null;
  
  constructor(componentId: string) {
    this.componentId = componentId;
    this.container = document.querySelector(`[data-component-id="${componentId}"]`) as HTMLElement;
    
    if (!this.container) return;
    
    this.videoData = this.extractVideoData();
    this.premiumGate = this.container.querySelector('.favorite-premium-gate') as HTMLElement;
    this.premiumControls = this.container.querySelector('.favorite-premium-controls') as HTMLElement;
    this.favoriteBtn = this.container.querySelector('.favorite-btn') as HTMLElement;
    
    this.init();
  }
  
  extractVideoData() {
    if (!this.container) {
      return {
        id: '', title: '', thumbnail: '', author: '', published: '', url: '', duration: '', views: ''
      };
    }
    
    // Get video data from the component props and surrounding elements
    const videoIdElement = this.container.querySelector('[data-video-id]') as HTMLElement | null;
    const videoId = videoIdElement?.dataset?.videoId || '';
    
    // Try to find video data from nearby elements
    const videoCard = this.container.closest('.video-card, .youtube-video, .video-item') as HTMLElement | null;
    
    return {
      id: videoId,
      title: this.container.dataset.videoTitle || videoCard?.querySelector('.video-title, h3, h4')?.textContent?.trim() || '',
      thumbnail: this.container.dataset.videoThumbnail || (videoCard?.querySelector('img') as HTMLImageElement | null)?.src || '',
      author: this.container.dataset.videoAuthor || videoCard?.querySelector('.video-author, .channel-name')?.textContent?.trim() || '',
      published: this.container.dataset.videoPublished || videoCard?.querySelector('.video-published, .published-date')?.textContent?.trim() || '',
      url: this.container.dataset.videoUrl || `https://www.youtube.com/watch?v=${videoId}`,
      duration: this.container.dataset.videoDuration || videoCard?.querySelector('.video-duration')?.textContent?.trim() || '',
      views: this.container.dataset.videoViews || videoCard?.querySelector('.video-views')?.textContent?.trim() || ''
    };
  }
  
  async init() {
    // Check membership and show appropriate UI
    const hasPremiumAccess = await this.checkPremiumAccess();
    
    if (hasPremiumAccess) {
      this.showPremiumControls();
      this.updateFavoriteState();
      this.attachEventListeners();
    } else {
      this.showPremiumGate();
    }
    
    // Listen for membership changes
    window.addEventListener('membershipUpdated', () => {
      this.init();
    });
    
    // Listen for favorites updates
    window.addEventListener('favoritesUpdated', () => {
      this.updateFavoriteState();
    });
  }
  
  async checkPremiumAccess() {
    try {
      // Use existing membership check function
      const membershipResult = await this.checkMembership();
      
      if (!membershipResult.valid) {
        return false;
      }
      
      // Check if access level is premium or unlimited
      const accessLevel = membershipResult.accessLevel || 'basic';
      return ['premium', 'unlimited'].includes(accessLevel);
      
    } catch (error) {
      console.error('Error checking premium access:', error);
      return false;
    }
  }
  
  // Reuse existing membership check logic
  async checkMembership() {
    // First check new localStorage format (email-based from Stripe)
    const membershipEmail = localStorage.getItem('membershipEmail');
    const membershipStatus = localStorage.getItem('membershipStatus');
    
    if (membershipEmail && membershipStatus) {
      try {
        const status = JSON.parse(membershipStatus);
        if (status && (status.valid || status.isValid) && status.tier !== 'free') {
          return { 
            valid: true, 
            tier: status.tier, 
            email: membershipEmail,
            source: 'localStorage'
          };
        }
      } catch (e) {
        console.error('üîç FAVORITES: Error parsing membershipStatus:', e);
      }
    }
    
    // Fallback to old code-based system
    const membershipCode = localStorage.getItem('membershipCode');
    
    if (!membershipCode) {
      return { valid: false };
    }
    
    // Check cache first
    const cachedStatus = localStorage.getItem('membershipStatus');
    const cacheTime = localStorage.getItem('membershipCacheTime');
    
    if (cachedStatus && cacheTime) {
      const cacheAge = Date.now() - parseInt(cacheTime);
      const cacheValidFor = 5 * 60 * 1000; // 5 minutes
      
      if (cacheAge < cacheValidFor) {
        try {
          const result = JSON.parse(cachedStatus);
          if (result.valid) {
            return result;
          }
        } catch (e) {
        }
      }
    }
    
    // Make API call
    try {
      const response = await fetch('/.netlify/functions/validate-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ code: membershipCode, action: 'validate' })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        if (result.isValid) {
          // Normalize the response format
          const normalizedResult = {
            valid: true,
            isValid: true,
            accessLevel: result.accessLevel || 'premium', // Default to premium for valid tokens
            remainingUses: result.remainingUses
          };
          
          // Cache the result
          localStorage.setItem('membershipStatus', JSON.stringify(normalizedResult));
          localStorage.setItem('membershipCacheTime', Date.now().toString());
          return normalizedResult;
        } else {
          // Clean up invalid membership
          localStorage.removeItem('membershipCode');
          localStorage.removeItem('membershipStatus');
          localStorage.removeItem('membershipCacheTime');
          return { valid: false, isValid: false };
        }
      }
    } catch (error) {
      console.error('Error checking membership:', error);
    }
    
    return { valid: false };
  }
  
  showPremiumGate() {
    if (this.premiumGate) this.premiumGate.style.display = 'block';
    if (this.premiumControls) this.premiumControls.style.display = 'none';
    
    // Add click handler for upgrade
    const premiumBtn = this.premiumGate?.querySelector('.favorite-btn.premium-locked');
    premiumBtn?.addEventListener('click', () => {
      // Track premium feature click
      this.trackPremiumFeatureClick();
    });
  }
  
  showPremiumControls() {
    if (this.premiumGate) this.premiumGate.style.display = 'none';
    if (this.premiumControls) this.premiumControls.style.display = 'block';
  }
  
  attachEventListeners() {
    this.favoriteBtn?.addEventListener('click', () => {
      this.toggleFavorite();
    });
  }
  
  updateFavoriteState() {
    if (!this.favoriteBtn || !this.videoData.id) return;
    
    const isFavorited = this.isVideoFavorited(this.videoData.id);
    const starIcon = this.favoriteBtn.querySelector('.star-icon');
    const btnText = this.favoriteBtn.querySelector('.btn-text');
    
    if (isFavorited) {
      this.favoriteBtn.classList.add('favorited');
      if (starIcon) starIcon.textContent = '‚≠ê';
      if (btnText) btnText.textContent = 'Saved';
      this.favoriteBtn.title = 'Remove from favorites';
    } else {
      this.favoriteBtn.classList.remove('favorited');
      if (starIcon) starIcon.textContent = '‚òÜ';
      if (btnText) btnText.textContent = 'Save';
      this.favoriteBtn.title = 'Add to favorites';
    }
  }
  
  isVideoFavorited(videoId) {
    try {
      const favorites = localStorage.getItem('videoFavorites');
      const favoritesArray = favorites ? JSON.parse(favorites) : [];
      return favoritesArray.some(fav => fav.id === videoId);
    } catch (error) {
      console.error('Error checking favorite status:', error);
      return false;
    }
  }
  
  async toggleFavorite() {
    if (!this.videoData.id) {
      this.showToast('Unable to save: Video ID not found', 'error');
      return;
    }
    
    // Show loading state
    if (this.favoriteBtn) this.favoriteBtn.classList.add('loading');
    
    try {
      const favorites = this.getFavorites();
      const existingIndex = favorites.findIndex(fav => fav.id === this.videoData.id);
      
      if (existingIndex > -1) {
        // Remove from favorites
        favorites.splice(existingIndex, 1);
        this.showToast('Removed from favorites', 'success');
      } else {
        // Add to favorites
        const favoriteData = {
          id: this.videoData.id,
          title: this.videoData.title,
          thumbnail: this.videoData.thumbnail,
          author: this.videoData.author,
          published: this.videoData.published,
          url: this.videoData.url,
          duration: this.videoData.duration,
          views: this.videoData.views,
          addedAt: new Date().toISOString()
        };
        
        favorites.unshift(favoriteData); // Add to beginning
        
        // Limit to prevent localStorage bloat
        if (favorites.length > 100) {
          favorites.splice(100);
        }
        
        this.showToast('Added to favorites!', 'success');
        if (this.favoriteBtn) {
          this.favoriteBtn.classList.add('success');
          setTimeout(() => this.favoriteBtn?.classList.remove('success'), 600);
        }
      }
      
      // Save to localStorage
      localStorage.setItem('videoFavorites', JSON.stringify(favorites));
      
      // Dispatch update event
      window.dispatchEvent(new CustomEvent('favoritesUpdated'));
      
      // Update UI
      this.updateFavoriteState();
      
    } catch (error) {
      console.error('Error toggling favorite:', error);
      this.showToast('Error saving favorite', 'error');
    } finally {
      // Remove loading state
      if (this.favoriteBtn) this.favoriteBtn.classList.remove('loading');
    }
  }
  
  getFavorites() {
    try {
      const favorites = localStorage.getItem('videoFavorites');
      return favorites ? JSON.parse(favorites) : [];
    } catch (error) {
      console.error('Error loading favorites:', error);
      return [];
    }
  }
  
  trackPremiumFeatureClick() {
    // Track when users click on premium-locked features
    
    // Could send analytics event here
    // gtag('event', 'premium_feature_click', { feature: 'favorites' });
  }
  
  showToast(message, type = 'success') {
    // Check if there's already a toast
    const existingToast = document.querySelector('.favorite-toast');
    if (existingToast) {
      existingToast.remove();
    }
    
    const toast = document.createElement('div');
    toast.className = 'favorite-toast';
    toast.textContent = message;
    
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'success' ? '#4CAF50' : '#ff6b6b'};
      color: white;
      padding: 0.75rem 1.25rem;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 10000;
      font-size: 0.875rem;
      max-width: 250px;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s ease;
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '1';
      toast.style.transform = 'translateX(0)';
    }, 100);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      toast.style.transform = 'translateX(100%)';
      setTimeout(() => toast.remove(), 300);
    }, 2500);
  }
}

// Initialize favorite buttons
document.addEventListener('DOMContentLoaded', () => {
  const favoriteContainers = document.querySelectorAll('.favorite-button-container[data-component-id]');
  favoriteContainers.forEach(container => {
    const componentId = (container as HTMLElement).dataset.componentId;
    if (componentId) {
      new PremiumFavoriteButton(componentId);
    }
  });
});

// Also initialize when new content is dynamically added
const observer = new MutationObserver(mutations => {
  mutations.forEach(mutation => {
    mutation.addedNodes.forEach(node => {
      if (node.nodeType === Node.ELEMENT_NODE) {
        const element = node as Element;
        const favoriteContainers = element.querySelectorAll('.favorite-button-container[data-component-id]');
        favoriteContainers.forEach(container => {
          const componentId = (container as HTMLElement).dataset.componentId;
          if (componentId) {
            new PremiumFavoriteButton(componentId);
          }
        });
      }
    });
  });
});

observer.observe(document.body, { childList: true, subtree: true });

// Expose the class globally for use by other components
(window as any).PremiumFavoriteButton = PremiumFavoriteButton;
</script>
