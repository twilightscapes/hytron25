---
export interface Props {
  themeMode: string;
}

const { themeMode } = Astro.props;
---

<script is:inline define:vars={{ themeMode }}>
    const lightModePref = window.matchMedia("(prefers-color-scheme: light)");

    function getUserPref() {
        if (themeMode === 'light' || themeMode === 'dark') {
            return themeMode;
        }
        const storedTheme = typeof localStorage !== "undefined" && localStorage.getItem("theme");
        return storedTheme || (lightModePref.matches ? "light" : "dark");
    }

    function setTheme(newTheme) {
        const root = document.documentElement;
        root.setAttribute("data-theme", newTheme);
        
        // Only set body styles if body exists
        if (document.body) {
            const bgColor = getComputedStyle(root).getPropertyValue(newTheme === 'light' ? '--theme-bg-light' : '--theme-bg-dark');
            document.body.style.backgroundColor = bgColor;
        } else {

        }
        
        // Set theme-color meta tag to proper hex values for PWA compliance
        const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");
        const themeColorHex = newTheme === 'light' ? '#ffffff' : '#222222'; // Use high contrast colors
        colorThemeMetaTag.setAttribute("content", themeColorHex);
        if (typeof localStorage !== "undefined") {
            localStorage.setItem("theme", newTheme);
        }
    }

    // Initialize theme immediately to prevent FOUC (but safely)
    function initializeTheme() {
        const theme = getUserPref();
    }

    // Try to initialize immediately, but also ensure it runs when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTheme);
    } else {
        initializeTheme();
    }

    document.addEventListener('DOMContentLoaded', () => {
        setTheme(getUserPref());
    });

    // Handle both regular navigation and view transitions (if enabled later)
    document.addEventListener("astro:after-swap", () => setTheme(getUserPref()));
    document.addEventListener("astro:page-load", () => setTheme(getUserPref()));


    
    // listen for theme-change custom event, fired in src/components/ThemeToggle.astro
    document.addEventListener("theme-change", (e) => {
        setTheme(e.detail.theme);
    });

    // listen for prefers-color-scheme change.
    lightModePref.addEventListener("change", (e) => setTheme(e.matches ? "light" : "dark"));
</script>