---
interface Props {
  title?: string;
  description?: string;
  placeholder?: string;
  showTitle?: boolean;
}

const { 
  title = "", 
  description = "",
  placeholder = "Paste Video URL here...",
  showTitle = true 
} = Astro.props;


---

<style>
  .you-form-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    place-self: center;
    padding: 0 0rem;
    align-content: center;
    margin: 0 auto 0 auto;
    text-align: center;
/* 
    background: rgba(54, 45, 71, 0.95); */
    /* background: linear-gradient(135deg, rgba(102, 126, 234, 0.9), rgba(118, 75, 162, 0.9)); */
  /* -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  border-radius: 16px; */
  /* border: 1px solid rgba(255,255,255,0.1);
  box-shadow: 0 8px 32px rgba(0,0,0,0.3); */
  max-width: 600px;
  width:90vw;

  color: white;

    /* min-height: 40vh; */
  }

  .you-form-title {
    font-size: clamp(1.8rem, 2.5vw, 3rem);
    font-weight: 700;
    margin-bottom: 1rem;
    /* background: linear-gradient(45deg, var(--theme-accent), var(--theme-accent-2, #af514c), #FF6B6B);
    background-clip: text; */
    /* -webkit-background-clip: text;
    -webkit-text-fill-color: transparent; */
    /* text-shadow: 0 4px 8px rgba(0,0,0,0.3); */

    animation: titleGlow 3s ease-in-out infinite alternate;
  }

  @keyframes titleGlow {
    from {
      filter: drop-shadow(0 0 10px rgba(135, 31, 31, 0.3));
    }
    to {
      filter: drop-shadow(0 0 20px rgba(249, 22, 75, 0.6));
    }
  }

  .you-form-description {
    font-size: clamp(1.1rem, 2.2vw, 1.4rem);
    /* margin-bottom: 3rem; */
    opacity: 0.9;
    max-width: 500px;
    line-height: 1.6;
    font-weight: 300;
    text-align:center;
  }

  .you-form-wrapper {
    position: relative;
    width: 100%;
    max-width: 700px;
    margin-bottom: 0;
    /* animation: formFloat 6s ease-in-out infinite; */
  }

  @keyframes formFloat {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-5px);
    }
  }

  .you-form-input {
    width: 100%;
    max-width: 500px;
    padding: 1rem .1rem;
    font-size: clamp(1.1rem, 2.8vw, 1.4rem);
    border: 3px solid ;
    border-radius: 60px;
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(20px);
    /* color: var(--theme-text, #fff); */
    text-align: left;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    outline: none;
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.1),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    font-weight: 400;
        padding-left:1rem;
        animation: titleGlow 3s ease-in-out infinite alternate;
  }

  .you-form-input:focus {
    border-color: var(--theme-accent, #4CAF50);
    background: rgba(255, 255, 255, 0.1);
    /* box-shadow: 
      0 0 0 4px rgba(76, 175, 80, 0.3),
      0 16px 40px rgba(0, 0, 0, 0.2),
      0 0 0 1px rgba(255, 255, 255, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.2); */
    transform: translateY(-3px) scale(1.02);
  }

  .you-form-input::placeholder {
    color:#ece8e8;
    transition: all 0.3s ease;
    font-weight: 300;
  }

  .you-form-input:focus::placeholder {
    /* opacity: 0.3; */
    transform: translateY(-2px);
  }

  .clipboard-button {
    position: absolute;
    right: 50px;
    top: 50%;
    transform: translateY(-50%);
    /* background: linear-gradient(45deg, var(--theme-accent, #4caf53), #45a06b);
    color: white; */
    border: none;
    padding: 0.8rem 1rem;
    border-radius: 30px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    /* box-shadow: 
      0 4px 12px rgba(76, 175, 80, 0.4),
      0 0 0 1px rgba(255, 255, 255, 0.1); */
    white-space: nowrap;
  }

  .clipboard-button:hover {
    transform: translateY(-50%) scale(1.08);
    /* box-shadow: 
      0 6px 20px rgba(76, 175, 80, 0.6),
      0 0 0 1px rgba(255, 255, 255, 0.2); */
  }

  .clipboard-button:active {
    transform: translateY(-50%) scale(0.95);
  }

  .status-message {
    margin-top: 1rem;
    padding: 1rem 1.5rem;
    border-radius: 25px;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    transform: translateY(-15px) scale(0.9);
    backdrop-filter: blur(10px);
  }

  .status-message.show {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .status-message.success {
    background: linear-gradient(45deg, rgba(76, 175, 80, 0.2), rgba(129, 199, 132, 0.2));
    color: #4CAF50;
    border: 2px solid rgba(76, 175, 80, 0.4);
    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.2);
  }

  .status-message.error {
    background: linear-gradient(45deg, rgba(244, 67, 54, 0.2), rgba(239, 83, 80, 0.2));
    color: #f44336;
    border: 2px solid rgba(244, 67, 54, 0.4);
    box-shadow: 0 8px 25px rgba(244, 67, 54, 0.2);
  }

  @media (max-width: 768px) {
    .you-form-container {
      padding: 0 ;
      /* min-height: 30vh; */
    }
    
    .you-form-input {
      padding: 1.2rem 1.5rem;
      padding-right: 1.5rem;
    }
    
    .clipboard-button {
      /* position: static;
      transform: none;
      margin-top: 1rem;
      width: 100%;
      padding: 1rem 1.5rem; */
      right:0;
    }
    
    .you-form-wrapper {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
  }

  /* Add some fun hover effects */
  .you-form-container:hover .you-form-title {
    animation-duration: 1.5s;
  }

  /* Loading animation for when URL is being processed */
  .you-form-input.processing {
    background: linear-gradient(90deg, 
      rgba(255, 255, 255, 0.05) 0%, 
      rgba(76, 175, 80, 0.1) 50%, 
      rgba(255, 255, 255, 0.05) 100%
    );
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }



  .resistance-quote {
      width:90%;
      margin:3rem auto;
    font-style: italic;
    font-size: 1.1rem;
    text-align: center;
    padding: 2rem;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 12px;
    color: white;
    border-left: 4px solid #fbbf24;
  }

  .hero-section {
    text-align: center;
    padding: 1rem 0;
    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
    border-radius: 20px;
    margin-bottom: 1rem;
    position: relative;
    overflow: hidden;
    margin:1vh auto 0 auto;
    color:white;
    max-width: 600px;
  }

  .hero-section::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 50%, rgba(239, 68, 68, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 70% 50%, rgba(59, 130, 246, 0.1) 0%, transparent 50%);
    pointer-events: none;
  }

  .hero-content {
    position: relative;
    z-index: 1;
  }

  .hero-title {
    font-size: clamp(2.3rem, 4.5vw, 4rem);
    font-weight: 900;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #ef4444, #f97316, #eab308);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.1;
  }

  .hero-subtitle {
    font-size: 1.4rem;
    margin-bottom: 1rem;
    opacity: 0.9;
    max-width: 90vw;
    margin-left: auto;
    margin-right: auto;
  }

  .hero-tagline {
    font-size: 1.5rem;
    font-weight: 600;
    color: #60a5fa;
    padding: 0 1rem;
    margin-bottom: 0rem;
  }

    .hero-tagline2 {
    font-size: 1rem;
    font-weight: 100;
    padding: 0 ;
    margin-top: 1rem;
  }





  .cta-button {
    display: inline-block;
    padding: .5rem 1rem;
    background: linear-gradient(45deg, #ef4444, #f97316);
    color: white;
    text-decoration: none;
    border-radius: 12px;
    font-size: clamp(1rem, 1.5vw, 2rem);
    font-weight: 700;
    transition: all 0.3s ease;
    margin: 0 auto 1rem auto;
  }

  .cta-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 35px rgba(239, 68, 68, 0.4);
  }

</style>

  <section class="hero-section">
    <div class="hero-content">
    <h1 class="hero-title">Video Privacy</h1>
      <p class="hero-subtitle">Your privacy first video portal</p>
      <p class="hero-tagline">👤 They're Watching. We're Not.</p>

      <p class="hero-tagline2">Supports: YouTube, TikTok, Vimeo, Twitch, Dailymotion</p>
    </div>

    <div class="you-form-container">
  <!-- {showTitle && (
    <>
      <h2 class="you-form-title">{title}</h2>
      <p class="you-form-description">{description}</p>
    </>
  )} -->
  
  <form id="youtube-form" class="you-form-wrapper" action="/video" method="GET" style="margin: 1rem 0 0 0">
    <input 
      type="text" 
      id="youtube-input" 
      name="video"
      class="you-form-input" 
      placeholder={placeholder}
      aria-label="Video URL Input"
      autocomplete="off"
      spellcheck="false"
    />
    <button type="button" id="clipboard-btn" class="clipboard-button">
      📋 Paste
    </button>
  </form>

  <div id="status-message" class="status-message"></div>



    <!-- <h2 class="section-title">Upgrade Now (one-time fee)</h2> -->
    <a href="/membership" class="cta-button font">Customize Channels and Favorites
</a>

</div>
  </section>
  <br />

<script>
// Multi-platform video detection and handling (same as video.astro)
function detectPlatform(url) {
  if (!url) return { platform: null, id: null };
  
  // YouTube
  if (url.includes('youtube.com') || url.includes('youtu.be')) {
    const videoId = extractVideoId(url);
    if (videoId) return { platform: 'youtube', id: videoId };
  }
  
  // Vimeo
  const vimeoMatch = url.match(/vimeo\.com\/(?:video\/)?(\d+)/);
  if (vimeoMatch) {
    return { platform: 'vimeo', id: vimeoMatch[1] };
  }
  
  // Facebook - Enhanced pattern matching
  const facebookMatch = url.match(/(?:facebook\.com|fb\.watch)\/(?:.*\/)?(?:videos?\/)?(?:.*\/)?(\d+)/);
  if (facebookMatch) {
    return { platform: 'facebook', id: facebookMatch[1] };
  }
  
  // Facebook watch URLs (non-numeric IDs)
  const fbWatchMatch = url.match(/fb\.watch\/([a-zA-Z0-9_-]+)/);
  if (fbWatchMatch) {
    return { platform: 'facebook', id: fbWatchMatch[1] };
  }

  // Twitch - Enhanced pattern matching
  const twitchVideoMatch = url.match(/(?:www\.)?twitch\.tv\/videos\/(\d+)/);
  if (twitchVideoMatch) {
    return { platform: 'twitch', id: twitchVideoMatch[1], type: 'video' };
  }

  // Twitch clips - multiple formats
  const twitchClipMatch = url.match(/(?:www\.)?twitch\.tv\/\w+\/clip\/(\w+)|clips\.twitch\.tv\/(\w+)/);
  if (twitchClipMatch) {
    const clipId = twitchClipMatch[1] || twitchClipMatch[2];
    return { platform: 'twitch', id: clipId, type: 'clip' };
  }
  
  // Twitch live streams and channel videos
  const twitchChannelMatch = url.match(/(?:www\.)?twitch\.tv\/([^\/\?]+)(?:\/video\/(\d+))?/);
  if (twitchChannelMatch && !url.includes('/videos/') && !url.includes('/clip/')) {
    return { platform: 'twitch', id: twitchChannelMatch[1], type: 'channel' };
  }
  
  // Dailymotion
  const dailymotionMatch = url.match(/dailymotion\.com\/video\/([a-zA-Z0-9]+)/);
  if (dailymotionMatch) {
    return { platform: 'dailymotion', id: dailymotionMatch[1] };
  }
  
  // TikTok
  const tiktokMatch = url.match(/tiktok\.com\/.*\/video\/(\d+)/);
  if (tiktokMatch) {
    return { platform: 'tiktok', id: tiktokMatch[1] };
  }
  
  // If it's already just an ID, assume YouTube for backward compatibility
  if (/^[a-zA-Z0-9_-]{11}$/.test(url)) {
    return { platform: 'youtube', id: url };
  }
  
  return { platform: null, id: null };
}

// Utility: Extract YouTube video ID from URL or ID
function extractVideoId(input) {
  if (!input) return null;
  if (/^[a-zA-Z0-9_-]{11}$/.test(input)) return input;
  let match = input.match(/youtu\.be\/([a-zA-Z0-9_-]{11})/);
  if (match) return match[1];
  match = input.match(/[?&]v=([a-zA-Z0-9_-]{11})/);
  if (match) return match[1];
  match = input.match(/\/(embed|v)\/([a-zA-Z0-9_-]{11})/);
  if (match) return match[2];
  match = input.match(/([a-zA-Z0-9_-]{11})/);
  if (match) return match[1];
  return null;
}

function showStatusMessage(message, type = 'success') {
  const statusEl = document.getElementById('status-message');
  if (!statusEl) return;
  
  statusEl.textContent = message;
  statusEl.className = `status-message ${type} show`;
  
  setTimeout(() => {
    statusEl.classList.remove('show');
  }, 3000);
}

function validateVideoUrl(url) {
  const detected = detectPlatform(url);
  return detected.platform !== null && detected.id !== null;
}

async function handleClipboardPaste() {
  try {
    const text = await navigator.clipboard.readText();
    const input = document.getElementById('youtube-input') as HTMLInputElement;
    
    if (!input) return;
    
    if (text && validateVideoUrl(text)) {
      input.value = text;
      input.classList.add('processing');
      showStatusMessage('✅ Video URL detected! Loading...');
      
      // Submit immediately without delay
      setTimeout(() => {
        const form = document.getElementById('youtube-form') as HTMLFormElement;
        if (document.startViewTransition) {
          document.startViewTransition(() => {
            form?.submit();
          });
        } else {
          form?.submit();
        }
      }, 300);
    } else if (text) {
      input.value = text;
      showStatusMessage('⚠️ Please enter a valid video URL', 'error');
    } else {
      showStatusMessage('📋 Clipboard is empty', 'error');
    }
  } catch (err) {
    showStatusMessage('❌ Unable to access clipboard', 'error');
    console.warn('Clipboard access failed:', err);
  }
}



// Initialize on DOM load
document.addEventListener('DOMContentLoaded', () => {
  const clipboardBtn = document.getElementById('clipboard-btn');
  const form = document.getElementById('youtube-form') as HTMLFormElement;
  const input = document.getElementById('youtube-input') as HTMLInputElement;

  if (clipboardBtn) {
    clipboardBtn.addEventListener('click', handleClipboardPaste);
  }

  if (form && input) {
    // Handle form submission
    form.addEventListener('submit', (e) => {
      
      const url = input.value.trim();
      
      // Log all form data
      const formData = new FormData(form);
      for (let [key, value] of formData.entries()) {
      }
      
      if (!url) {
        e.preventDefault();
        showStatusMessage('Please enter a video URL', 'error');
        return;
      }
      
      if (!validateVideoUrl(url)) {
        e.preventDefault();
        showStatusMessage('Please enter a valid video URL', 'error');
        return;
      }
      
      // Add processing animation
      input.classList.add('processing');
      showStatusMessage('🚀 Loading your ad-free video...');
      
      // Use view transitions for smooth navigation
      if (document.startViewTransition) {
        e.preventDefault();
        document.startViewTransition(() => {
          const submitUrl = `${form.action}?video=${encodeURIComponent(url)}`;
          window.location.href = submitUrl;
        });
      } else {
        // Fallback for browsers without view transitions
      }
    });

        // Debounce function for input handling
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Helper function to show status messages
    function showStatusMessage(message, type = 'success') {
      const statusDiv = document.querySelector('.status-message') as HTMLElement;
      if (statusDiv) {
        statusDiv.textContent = message;
        statusDiv.className = `status-message ${type}`;
        statusDiv.style.display = 'block';
      }
    }

    // Helper function to hide status messages
    function hideStatusMessage() {
      const statusDiv = document.querySelector('.status-message') as HTMLElement;
      if (statusDiv) {
        statusDiv.style.display = 'none';
      }
    }

    // Handle input changes for URL validation and auto-detection
    input.addEventListener('input', debounce((e) => {
      const url = e.target.value.trim();
      
      if (url && validateVideoUrl(url)) {
        showStatusMessage('✅ Valid video URL detected - Auto-submitting...');
        // Auto-submit with smooth timing
        setTimeout(() => {
          form.submit();
        }, 1000); // Give user time to see the success message
      } else if (url) {
        showStatusMessage('❌ Please enter a valid video URL', 'error');
      } else {
        hideStatusMessage();
      }
    }, 300));

    // Handle Enter key for quick submission
    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        form.dispatchEvent(new Event('submit', { cancelable: true }));
      }
    });
  }
});

// Re-check clipboard when page becomes visible
document.addEventListener('visibilitychange', () => {
  if (!document.hidden) {
    // Clipboard auto-detection removed to prevent permission prompts
  }
});
</script>

